name: Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags (e.g., v1.0.0, v1.2.3)

env:
  GO_VERSION: '1.21'
  CGO_ENABLED: '0'

jobs:
  # Build job for all platforms
  build:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            platform: linux-amd64
          - os: ubuntu-latest
            arch: arm64
            platform: linux-arm64
          - os: macos-latest
            arch: amd64
            platform: darwin-amd64
          - os: macos-latest
            arch: arm64
            platform: darwin-arm64
          - os: windows-latest
            arch: amd64
            platform: windows-amd64
          - os: windows-latest
            arch: arm64
            platform: windows-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build binary
        run: |
          # Extract version from tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          
          # Build flags
          LDFLAGS="-s -w -X main.version=$VERSION -X main.commit=${{ github.sha }} -X main.date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          
          # Build for current platform
          GOOS=${{ matrix.os == 'windows-latest' && 'windows' || matrix.os == 'macos-latest' && 'darwin' || 'linux' }} \
          GOARCH=${{ matrix.arch }} \
          go build -ldflags "$LDFLAGS" -o kalco-${{ matrix.platform }}
          
          # Create archive
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            zip kalco-${{ matrix.platform }}.zip kalco-${{ matrix.platform }}.exe
            echo "ASSET_PATH=kalco-${{ matrix.platform }}.zip" >> $GITHUB_ENV
          else
            tar -czf kalco-${{ matrix.platform }}.tar.gz kalco-${{ matrix.platform }}
            echo "ASSET_PATH=kalco-${{ matrix.platform }}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kalco-${{ matrix.platform }}
          path: ${{ env.ASSET_PATH }}

  # Create release
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Kalco ${{ steps.version.outputs.version }}
          body: |
            ## 🚀 Kalco ${{ steps.version.outputs.version }}
            
            ### 📦 Downloads
            
            **Linux:**
            - [kalco-linux-amd64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ github.ref }}/kalco-linux-amd64.tar.gz)
            - [kalco-linux-arm64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ github.ref }}/kalco-linux-arm64.tar.gz)
            
            **macOS:**
            - [kalco-darwin-amd64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ github.ref }}/kalco-darwin-amd64.tar.gz)
            - [kalco-darwin-arm64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ github.ref }}/kalco-darwin-arm64.tar.gz)
            
            **Windows:**
            - [kalco-windows-amd64.zip](https://github.com/${{ github.repository }}/releases/download/${{ github.ref }}/kalco-windows-amd64.zip)
            - [kalco-windows-arm64.zip](https://github.com/${{ github.repository }}/releases/download/${{ github.ref }}/kalco-windows-arm64.zip)
            
            ### 🔧 Installation
            
            **Linux/macOS:**
            ```bash
            # Download and extract
            wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref }}/kalco-${{ steps.version.outputs.version }}-$(uname -s | tr '[:upper:]' '[:lower:]')-$(uname -m).tar.gz
            tar -xzf kalco-${{ steps.version.outputs.version }}-$(uname -s | tr '[:upper:]' '[:lower:]')-$(uname -m).tar.gz
            
            # Make executable and move to PATH
            chmod +x kalco
            sudo mv kalco /usr/local/bin/
            ```
            
            **Windows:**
            ```powershell
            # Download and extract
            Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/download/${{ github.ref }}/kalco-windows-amd64.zip" -OutFile "kalco.zip"
            Expand-Archive -Path "kalco.zip" -DestinationPath "."
            
            # Add to PATH or run from current directory
            .\kalco.exe
            ```
            
            ### 📋 What's New
            
            Check the [releases page](https://github.com/${{ github.repository }}/releases) for detailed information about this release.
            
            ### 🚀 Quick Start
            
            ```bash
            # Basic usage
            kalco --output-dir ./cluster-backup
            
            # With Git integration
            kalco --output-dir ./cluster-backup --commit-message "Backup $(date)"
            
            # Auto-push to remote
            kalco --output-dir ./cluster-backup --git-push
            ```
            
            ### 🎯 Features
            
            - 🎯 Complete Kubernetes resource discovery and export
            - 🚀 Automatic Git repository initialization and version control
            - 📊 Enhanced change reports with detailed diffs
            - 🌐 Multi-platform support (Linux, macOS, Windows)
            - ⚡ Production-ready performance and reliability
            
            ---
            
            *Built with ❤️ for the Kubernetes community*
          draft: false
          prerelease: false
          files: |
            artifacts/*/kalco-*.tar.gz
            artifacts/*/kalco-*.zip


